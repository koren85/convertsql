"""
Модуль для использования нейросетей в конвертации SQL
"""

import os
import time
import json
import requests
import re
from typing import Dict, Any, Optional, Tuple
from pathlib import Path
from dotenv import load_dotenv

# Загружаем переменные из .env файла
env_path = Path(__file__).resolve().parent.parent / '.env'
load_dotenv(dotenv_path=env_path)

class AIConverter:
    """
    Класс для конвертации SQL с использованием нейросетей через API
    """
    
    def __init__(self, config):
        """
        Инициализация с настройками из конфигурации
        """
        self.config = config
        self.api_keys = {
            'openai': os.getenv('OPENAI_API_KEY', ''),
            'anthropic': os.getenv('ANTHROPIC_API_KEY', ''),
        }
        
    def convert_with_ai(self, original_script: str, error_message: str = None) -> Tuple[bool, str, str]:
        """
        Конвертирует скрипт используя нейросеть
        
        Args:
            original_script: Исходный MS SQL скрипт
            error_message: Сообщение об ошибке из PostgreSQL, если есть
            
        Returns:
            Tuple[bool, str, str]: (успех, сконвертированный скрипт, сообщение)
        """
        # Определяем какой API использовать из конфигурации
        ai_provider = getattr(self.config, 'AI_PROVIDER', 'openai').lower()
        
        if ai_provider == 'openai':
            return self._convert_with_openai(original_script, error_message)
        elif ai_provider == 'anthropic':
            return self._convert_with_anthropic(original_script, error_message)
        else:
            return False, original_script, f"Неизвестный провайдер AI: {ai_provider}"
    
    def _convert_with_openai(self, original_script: str, error_message: str = None) -> Tuple[bool, str, str]:
        """
        Конвертирует скрипт используя OpenAI API
        """
        api_key = self.api_keys.get('openai')
        if not api_key:
            return False, original_script, "API ключ OpenAI не найден. Проверьте файл .env или переменную окружения OPENAI_API_KEY."
        
        model = getattr(self.config, 'OPENAI_MODEL', 'gpt-4') 
        temperature = getattr(self.config, 'AI_TEMPERATURE', 0.1)
        max_tokens = getattr(self.config, 'AI_MAX_TOKENS', 4000)
        
        # Формируем промпт для модели
        prompt = self._create_prompt(original_script, error_message)
        
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}"
        }
        
        data = {
            "model": model,
            "messages": [
                {"role": "system", "content": "Ты - эксперт по миграции SQL-скриптов с MS SQL на PostgreSQL."},
                {"role": "user", "content": prompt}
            ],
            "temperature": temperature,
            "max_tokens": max_tokens
        }
        
        try:
            response = requests.post(
                "https://api.openai.com/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=60
            )
            
            if response.status_code != 200:
                return False, original_script, f"Ошибка API OpenAI: {response.status_code} - {response.text}"
            
            response_data = response.json()
            converted_script = response_data['choices'][0]['message']['content']
            
            # Извлекаем SQL из ответа (может содержать пояснения)
            converted_script = self._extract_sql_from_response(converted_script)
            
            return True, converted_script, "Успешно сконвертировано с помощью OpenAI"
            
        except Exception as e:
            return False, original_script, f"Ошибка при запросе к OpenAI: {str(e)}"
    
    def _convert_with_anthropic(self, original_script: str, error_message: str = None) -> Tuple[bool, str, str]:
        """
        Конвертирует скрипт используя Anthropic API
        """
        api_key = self.api_keys.get('anthropic')
        if not api_key:
            return False, original_script, "API ключ Anthropic не найден. Проверьте файл .env или переменную окружения ANTHROPIC_API_KEY."
        
        model = getattr(self.config, 'ANTHROPIC_MODEL', 'claude-3-sonnet-20240229')
        temperature = getattr(self.config, 'AI_TEMPERATURE', 0.1)
        max_tokens = getattr(self.config, 'AI_MAX_TOKENS', 4000)
        
        # Формируем промпт для модели
        prompt = self._create_prompt(original_script, error_message)
        
        # Обновленные заголовки для современного Anthropic API
        headers = {
            "Content-Type": "application/json",
            "anthropic-version": "2023-06-01",
            "x-api-key": api_key
        }
        
        # Печатаем первые 10 символов ключа для отладки
        key_preview = api_key[:10] + "..." if len(api_key) > 10 else api_key
        print(f"Используем ключ API Anthropic (первые символы): {key_preview}")
        
        data = {
            "model": model,
            "max_tokens": max_tokens,
            "temperature": temperature,
            "system": "Ты - эксперт по миграции SQL-скриптов с MS SQL на PostgreSQL.",
            "messages": [
                {"role": "user", "content": prompt}
            ]
        }
        
        try:
            response = requests.post(
                "https://api.anthropic.com/v1/messages",
                headers=headers,
                json=data,
                timeout=60
            )
            
            print(f"Код ответа от Anthropic API: {response.status_code}")
            
            if response.status_code != 200:
                return False, original_script, f"Ошибка API Anthropic: {response.status_code} - {response.text}"
            
            response_data = response.json()
            converted_script = response_data['content'][0]['text']
            
            # Извлекаем SQL из ответа (может содержать пояснения)
            converted_script = self._extract_sql_from_response(converted_script)
            
            return True, converted_script, "Успешно сконвертировано с помощью Anthropic Claude"
            
        except Exception as e:
            return False, original_script, f"Ошибка при запросе к Anthropic: {str(e)}"
    
    def _create_prompt(self, original_script: str, error_message: str = None) -> str:
        """
        Создает промпт для нейросети на основе оригинального скрипта и ошибки
        """
        prompt = """
Я хочу конвертировать скрипт из MS SQL в PostgreSQL. Пожалуйста, произведи конвертацию, учитывая следующие правила:
1. Преобразуй синтаксис MS SQL в синтаксис PostgreSQL
2. Убери квадратные скобки для идентификаторов
3. Замени все найденные функции MS SQL на эквиваленты PostgreSQL, например (ISNULL -> COALESCE, GETDATE() -> CURRENT_TIMESTAMP и т.д.)
4. Преобразуй типы данных (NVARCHAR -> VARCHAR, DATETIME -> TIMESTAMP и т.д.)
5. Замени TOP на LIMIT
6. Адаптируй временные таблицы
7. Устрани другие проблемы совместимости
8. Если в postgres нет такой функции как в MS SQL (например DATEDIFF), то замени ее на эквивалентную функцию или выражение в postgres(DATE_PART), не используй функцию вычисления дат EPOCH. и укажи в комментариях какое выражение было до конвертации

Верни только сконвертированный SQL-скрипт без объяснений, чтобы я мог его сразу использовать.

Вот исходный MS SQL скрипт для конвертации:
```sql
{original_script}
```
""".format(original_script=original_script)

        # Если есть сообщение об ошибке, добавляем его
        if error_message:
            prompt += f"""
При попытке выполнить скрипт в PostgreSQL, возникла следующая ошибка:
```
{error_message}
```

Пожалуйста, исправь скрипт, чтобы устранить эту ошибку.
"""

        return prompt
    
    def _extract_sql_from_response(self, response: str) -> str:
        """
        Извлекает SQL-код из ответа нейросети
        """
        # Пытаемся найти SQL между тройными обратными кавычками
        sql_pattern = r"```sql\s*([\s\S]*?)\s*```"
        sql_match = re.search(sql_pattern, response)
        
        if sql_match:
            sql_code = sql_match.group(1).strip()
        else:
            # Если не нашли в формате ```sql, ищем просто между тройными кавычками
            sql_pattern = r"```\s*([\s\S]*?)\s*```"
            sql_match = re.search(sql_pattern, response)
            
            if sql_match:
                sql_code = sql_match.group(1).strip()
            else:
                # Если и так не нашли, возвращаем весь ответ, предполагая, что это чистый SQL
                sql_code = response.strip()
        
        # Исправляем типичные ошибки в SQL, которые могут возникнуть при конвертации
        
        # Исправляем неправильное использование ::TIMESTAMP в операторах SET
        sql_code = re.sub(
            r"(SET\s+\w+\s*=\s*'[^']*')::TIMESTAMP", 
            r"CAST(\1 AS TIMESTAMP)", 
            sql_code
        )
        
        return sql_code
