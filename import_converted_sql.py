import os
import sys
import glob
import re
from dotenv import load_dotenv

load_dotenv()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –°–£–ë–î –∏–∑ env
DB_PROVIDER = os.getenv('DB_PROVIDER', '').lower()  # postgres –∏–ª–∏ mssql

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –°–£–ë–î
if DB_PROVIDER not in ['postgres', 'mssql']:
    print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –°–£–ë–î: {DB_PROVIDER}")
    print("–£–∫–∞–∂–∏—Ç–µ DB_PROVIDER=postgres –∏–ª–∏ DB_PROVIDER=mssql –≤ —Ñ–∞–π–ª–µ .env")
    sys.exit(1)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
DB_HOST = os.getenv('DST_HOST')
DB_PORT = os.getenv('DST_PORT')
DB_USER = os.getenv('DST_USER')
DB_PASSWORD = os.getenv('DST_PASSWORD')
DB_NAME = os.getenv('DST_DATABASE')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
if not all([DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME]):
    print(f"‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {DB_PROVIDER} —É–∫–∞–∑–∞–Ω—ã –≤ —Ñ–∞–π–ª–µ .env")
    sys.exit(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_to_database():
    if DB_PROVIDER == 'postgres':
        try:
            import psycopg2
            conn = psycopg2.connect(
                host=DB_HOST,
                port=DB_PORT,
                user=DB_USER,
                password=DB_PASSWORD,
                database=DB_NAME
            )
            print(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            return conn
        except ImportError:
            print("‚ùå –û—à–∏–±–∫–∞: –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ psycopg2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π: pip install psycopg2-binary")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ PostgreSQL: {e}")
            sys.exit(1)
    else:  # mssql
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ JAVA_HOME –¥–ª—è Python
            java_home = '/opt/homebrew/opt/openjdk'  # –ü—É—Ç—å –Ω–∞ M1/M2 Mac
            if not os.path.exists(java_home):
                java_home = '/usr/local/opt/openjdk'  # –ü—É—Ç—å –Ω–∞ Intel Mac

            os.environ['JAVA_HOME'] = java_home
            
            import jpype
            import jpype.imports
            
            # –ü—É—Ç—å –∫ JDBC –¥—Ä–∞–π–≤–µ—Ä—É
            jdbc_driver_path = './lib/mssql-jdbc.jar'
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
            if not os.path.exists(jdbc_driver_path):
                print(f"‚ùå –û—à–∏–±–∫–∞: JDBC –¥—Ä–∞–π–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {jdbc_driver_path}")
                print("–°–∫–∞—á–∞–π –¥—Ä–∞–π–≤–µ—Ä —Å https://learn.microsoft.com/en-us/sql/connect/jdbc/download-microsoft-jdbc-driver-for-sql-server")
                sys.exit(1)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º JVM
            if not jpype.isJVMStarted():
                jvm_path = jpype.getDefaultJVMPath()
                jpype.startJVM(jvm_path, f"-Djava.class.path={jdbc_driver_path}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Java –∫–ª–∞—Å—Å—ã
            from java.sql import DriverManager, SQLException
            
            # JDBC —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            jdbc_url = f'jdbc:sqlserver://{DB_HOST}:{DB_PORT};databaseName={DB_NAME};trustServerCertificate=true;encrypt=false'
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            connection = DriverManager.getConnection(jdbc_url, DB_USER, DB_PASSWORD)
            print(f"‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MSSQL —á–µ—Ä–µ–∑ JDBC —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            
            return connection
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ MSSQL: {e}")
            import traceback
            traceback.print_exc()
            sys.exit(1)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—è converted_sql
def ensure_converted_sql_column_exists(conn):
    try:
        if DB_PROVIDER == 'postgres':
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'ppr_calc_algorithm' AND column_name = 'converted_sql'
            """)
            
            if cursor.fetchone() is None:
                print("–°–æ–∑–¥–∞—é —Å—Ç–æ–ª–±–µ—Ü converted_sql –≤ —Ç–∞–±–ª–∏—Ü–µ PPR_CALC_ALGORITHM...")
                cursor.execute("ALTER TABLE ppr_calc_algorithm ADD COLUMN converted_sql TEXT")
                conn.commit()
                print("‚úÖ –°—Ç–æ–ª–±–µ—Ü —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print("–°—Ç–æ–ª–±–µ—Ü converted_sql —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
            cursor.close()
        else:  # mssql
            statement = conn.createStatement()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞
            result_set = statement.executeQuery("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'PPR_CALC_ALGORITHM' AND column_name = 'CONVERTED_SQL'
            """)
            
            column_exists = result_set.next()
            result_set.close()
            
            if not column_exists:
                print("–°–æ–∑–¥–∞—é —Å—Ç–æ–ª–±–µ—Ü CONVERTED_SQL –≤ —Ç–∞–±–ª–∏—Ü–µ PPR_CALC_ALGORITHM...")
                statement.execute("ALTER TABLE PPR_CALC_ALGORITHM ADD CONVERTED_SQL NVARCHAR(MAX)")
                print("‚úÖ –°—Ç–æ–ª–±–µ—Ü —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                print("–°—Ç–æ–ª–±–µ—Ü CONVERTED_SQL —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
            statement.close()
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–æ–ª–±—Ü–∞: {e}")
        if DB_PROVIDER != 'postgres':
            import traceback
            traceback.print_exc()
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def import_scripts_to_database(conn):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å–∫—Ä–∏–ø—Ç–æ–≤
    script_files = glob.glob('scripts/exported/*.sql')
    
    if not script_files:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã SQL-—Å–∫—Ä–∏–ø—Ç—ã –≤ –ø–∞–ø–∫–µ scripts/exported/")
        return
    
    # –®–∞–±–ª–æ–Ω –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    id_pattern = re.compile(r'(\d+)_exp_\d+\.sql')
    
    total_files = len(script_files)
    processed = 0
    failed = 0
    
    try:
        for script_file in script_files:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            file_name = os.path.basename(script_file)
            match = id_pattern.match(file_name)
            
            if not match:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ñ–∞–π–ª–∞ {file_name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID")
                failed += 1
                continue
            
            a_id = match.group(1)
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            with open(script_file, 'r', encoding='utf-8') as f:
                script_content = f.read()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if DB_PROVIDER == 'postgres':
                cursor = conn.cursor()
                try:
                    cursor.execute(
                        "UPDATE ppr_calc_algorithm SET converted_sql = %s WHERE a_id = %s",
                        (script_content, a_id)
                    )
                    affected_rows = cursor.rowcount
                    conn.commit()
                    
                    if affected_rows > 0:
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å ID={a_id}")
                        processed += 1
                    else:
                        print(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å ID={a_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                        failed += 1
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ —Å ID={a_id}: {e}")
                    failed += 1
                    conn.rollback()
                finally:
                    cursor.close()
            else:  # mssql
                # –î–ª—è MSSQL –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–ø–∞—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π statement
                try:
                    prepared_statement = conn.prepareStatement(
                        "UPDATE PPR_CALC_ALGORITHM SET CONVERTED_SQL = ? WHERE A_ID = ?"
                    )
                    
                    prepared_statement.setString(1, script_content)
                    prepared_statement.setInt(2, int(a_id))
                    
                    affected_rows = prepared_statement.executeUpdate()
                    
                    if affected_rows > 0:
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å —Å ID={a_id}")
                        processed += 1
                    else:
                        print(f"‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å ID={a_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                        failed += 1
                        
                    prepared_statement.close()
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ —Å ID={a_id}: {e}")
                    import traceback
                    traceback.print_exc()
                    failed += 1
        
        print(f"\nüìä –ò—Ç–æ–≥–∏ –∏–º–ø–æ—Ä—Ç–∞:")
        print(f"   - –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}")
        print(f"   - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}")
        print(f"   - –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: {failed}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Å–∫—Ä–∏–ø—Ç–æ–≤: {e}")
        if DB_PROVIDER != 'postgres':
            import traceback
            traceback.print_exc()
        raise

def main():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = connect_to_database()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ converted_sql
        ensure_converted_sql_column_exists(conn)
        
        # –ò–º–ø–æ—Ä—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤
        import_scripts_to_database(conn)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if DB_PROVIDER == 'postgres':
            conn.close()
        else:  # mssql
            conn.close()
            if jpype.isJVMStarted():
                jpype.shutdownJVM()
                
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if DB_PROVIDER != 'postgres':
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    main() 