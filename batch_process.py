#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ SQL-—Å–∫—Ä–∏–ø—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""

import os
import sys
import argparse
import yaml
import json
import time
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
from tqdm import tqdm

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
import config
from src.parser import SQLParser
from src.converter import SQLConverter
from src.postgres_tester import PostgresTester
from src.logger import Logger
from src.report_generator import ReportGenerator
from src.ai_converter import AIConverter

def process_script(script_path, output_dir, params=None, retry_count=3, verbose=False, ai_provider='anthropic', max_iterations=3):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω SQL —Å–∫—Ä–∏–ø—Ç —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    script_name = "conv_" + os.path.basename(script_path)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º
    parser = SQLParser(config)
    converter = AIConverter(config)
    tester = PostgresTester(config)
    logger = Logger(config)
    
    try:
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä–∏–ø—Ç–∞
        with open(script_path, 'r', encoding='utf-8') as f:
            script_content = f.read()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        # logger.log_script_processing(script_name, 'start', 'success')
        
        # –ü–∞—Ä—Å–∏–º —Å–∫—Ä–∏–ø—Ç
        parsed_script = parser.parse_script(script_content)
        # logger.log_script_processing(script_name, 'parsing', 'success')
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
        # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–º–µ–Ω—è–µ–º config.AI_PROVIDER
        orig_provider = getattr(config, 'AI_PROVIDER', None)
        config.AI_PROVIDER = ai_provider
        success, converted_script, message = converter.convert_with_ai(parsed_script, error_message=None, max_iterations=max_iterations)
        if orig_provider is not None:
            config.AI_PROVIDER = orig_provider
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ —Ä—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        requires_manual = False
        if not success and "—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏" in message:
            requires_manual = True
            if verbose:
                print(f"‚ö†Ô∏è {script_name}: {message}")
            logger.log_script_processing(script_name, 'conversion', 'skipped', message)
            return {
                'script': script_name,
                'success': False,
                'error': message,
                'manual_processing': True,
                'retries': 0,
                'original_size': len(script_content),
                'converted_size': len(converted_script)
            }
            
        # logger.log_script_processing(script_name, 'conversion', 'success' if success else 'failed', message)
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è
        script_params = config.DEFAULT_PARAMS.copy()
        if params:
            script_params.update(params)
            
        script_with_params = parser.replace_params(converted_script, script_params)
        # logger.log_script_processing(script_name, 'parameter_replacement', 'success')
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤ PostgreSQL
        retries = 0
        last_error = None
        test_success = False
        missing_table = False
        
        while retries < retry_count and not test_success:
            try:
                test_result = tester.test_script(script_with_params)
                if test_result['success']:
                    test_success = True
                    # logger.log_script_processing(script_name, 'testing', 'success', {
                    #     'execution_time': test_result['execution_time'],
                    #     'row_count': test_result['row_count']
                    # })
                else:
                    last_error = test_result['error']
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
                    if 'relation' in last_error and 'does not exist' in last_error:
                        missing_table = True
                        # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ—Ç
                        break
                    
                    if verbose:
                        print(f"–ü–æ–ø—ã—Ç–∫–∞ {retries+1}: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {script_name}: {last_error}")
                    # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º fix_script, AI —É–∂–µ –¥–µ–ª–∞–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    retries += 1
            except Exception as e:
                last_error = str(e)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ
                if 'relation' in str(e) and 'does not exist' in str(e):
                    missing_table = True
                    # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–µ—Ç
                    break
                
                if verbose:
                    print(f"–ü–æ–ø—ã—Ç–∫–∞ {retries+1}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {script_name}: {last_error}")
                retries += 1
        
        # –õ–æ–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞
        if missing_table:
            logger.log_script_processing(script_name, 'error', 'missing_table', last_error)
            if verbose:
                print(f"üìã {script_name}: –ü—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–∞–±–ª–∏—Ü—ã: {last_error}")
        elif not test_success or not success:
            logger.log_script_processing(script_name, 'error', 'failed', last_error or message)
            if verbose:
                print(f"‚ùå {script_name}: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ {retry_count} –ø–æ–ø—ã—Ç–æ–∫")
        elif verbose:
            print(f"‚úÖ {script_name}: –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
        output_path = os.path.join(output_dir, script_name)
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(converted_script)
        # logger.log_script_processing(script_name, 'saving', 'success')
        
        return {
            'script': script_name,
            'success': test_success and success,
            'error': last_error or message if not test_success or not success else None,
            'manual_processing': requires_manual,
            'missing_table': missing_table,
            'retries': retries,
            'original_size': len(script_content),
            'converted_size': len(converted_script)
        }
            
    except Exception as e:
        error_msg = str(e)
        logger.log_script_processing(script_name, 'processing', 'failed', error_msg)
        if verbose:
            print(f"‚ùå {script_name}: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error_msg}")
        
        return {
            'script': script_name,
            'success': False,
            'error': error_msg,
            'manual_processing': False,
            'retries': 0,
            'original_size': 0,
            'converted_size': 0
        }

def process_batch(config_file, verbose=False, ai_provider='anthropic', skip_docker_check=False, max_iterations=3, limit=None, offset=0):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        with open(config_file, 'r') as f:
            batch_config = yaml.safe_load(f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {str(e)}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    required_fields = ['name', 'input_dir', 'output_dir']
    for field in required_fields:
        if field not in batch_config:
            print(f"–û—à–∏–±–∫–∞: –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '{field}'")
            return False
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    batch_name = batch_config['name']
    input_dir = Path(batch_config['input_dir'])
    output_dir = Path(batch_config['output_dir'])
    retry_count = batch_config.get('retry_count', 3)
    parallel = batch_config.get('parallel', 4)
    params = batch_config.get('params', {})
    limit = limit or batch_config.get('limit')
    offset = offset or batch_config.get('offset', 0)
    
    print(f"–ó–∞–ø—É—Å–∫ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {batch_name}")
    print(f"–ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {input_dir}")
    print(f"–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: {retry_count}")
    print(f"–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {parallel}")
    if params:
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(params, indent=2)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if not input_dir.exists() or not input_dir.is_dir():
        print(f"–û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {input_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    output_dir.mkdir(exist_ok=True, parents=True)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ SQL-—Å–∫—Ä–∏–ø—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏
    scripts = sorted(input_dir.glob('*.sql'), key=lambda p: p.name)
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º offset (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ N —Ñ–∞–π–ª–æ–≤)
    if offset > 0:
        scripts = scripts[offset:]
        print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–µ—Ä–≤—ã—Ö {offset} —Ñ–∞–π–ª–æ–≤")
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º limit (–æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)    
    if limit is not None:
        scripts = scripts[:limit]
        
    if not scripts:
        print(f"–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {input_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ SQL-—Å–∫—Ä–∏–ø—Ç–æ–≤ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è offset/limit")
        return False
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(scripts)} SQL-—Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    tester = PostgresTester(config)
    if not skip_docker_check:
        try:
            tester.ensure_docker_running()
            print("Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {str(e)}")
            print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ 'docker-compose up -d' –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∫—Ä–∏–ø—Ç–∞")
            return False
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    start_time = time.time()
    results = []
    
    with ThreadPoolExecutor(max_workers=parallel) as executor:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
        future_to_script = {
            executor.submit(process_script, str(script), str(output_dir), params, retry_count, verbose, ai_provider, max_iterations): script
            for script in scripts
        }
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        for future in tqdm(as_completed(future_to_script), total=len(scripts), desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–ø—Ç–æ–≤"):
            script = future_to_script[future]
            try:
                result = future.result()
                results.append(result)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {script}: {str(e)}")
                results.append({
                    'script': os.path.basename(str(script)),
                    'success': False,
                    'error': str(e),
                    'retries': 0,
                    'original_size': 0,
                    'converted_size': 0
                })
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    elapsed_time = time.time() - start_time
    success_count = sum(1 for r in results if r['success'])
    manual_count = sum(1 for r in results if r.get('manual_processing', False))
    missing_table_count = sum(1 for r in results if r.get('missing_table', False))
    failed_count = len(results) - success_count - manual_count - missing_table_count
    
    print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(results)} —Å–∫—Ä–∏–ø—Ç–æ–≤")
    print(f"  - –£—Å–ø–µ—à–Ω–æ: {success_count}")
    print(f"  - –¢—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏: {manual_count}")
    print(f"  - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {missing_table_count}")
    print(f"  - –û—à–∏–±–∫–∏: {failed_count}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_path = output_dir / f"{batch_name}_report.json"
    report = {
        'name': batch_name,
        'timestamp': time.time(),
        'input_dir': str(input_dir),
        'output_dir': str(output_dir),
        'success_count': success_count,
        'manual_count': manual_count,
        'missing_table_count': missing_table_count, 
        'failed_count': failed_count,
        'total_count': len(results),
        'elapsed_time': elapsed_time,
        'results': results
    }
    
    with open(report_path, 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_path}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML/Excel/JSON –æ—Ç—á–µ—Ç –ø–æ –∏—Ç–æ–≥–æ–≤–æ–º—É json-–æ—Ç—á—ë—Ç—É
    if batch_config.get('generate_html_report', True):
        report_generator = ReportGenerator(config)
        reports = report_generator.generate_summary_report(str(report_path))
        if reports:
            print("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏—Ç–æ–≥–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã:")
            for report_type, report_path in reports.items():
                print(f"  - {report_type}: {report_path}")
        else:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á—ë—Ç–∞.")
    
    # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (–¥–∞–∂–µ –µ—Å–ª–∏ —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã)
    # –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º –Ω–µ—É—Å–ø–µ—Ö–æ–º
    return failed_count == 0

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    parser = argparse.ArgumentParser(description='–ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SQL —Å–∫—Ä–∏–ø—Ç–æ–≤')
    parser.add_argument('config', help='–ü—É—Ç—å –∫ YAML-—Ñ–∞–π–ª—É —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–∞–∫–µ—Ç–∞')
    parser.add_argument('--verbose', '-v', action='store_true', help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
    parser.add_argument('--provider', default='anthropic', help='AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä: anthropic –∏–ª–∏ openai')
    parser.add_argument('--skip-docker-check', action='store_true', help='–ù–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å Docker')
    parser.add_argument('--max-iterations', type=int, default=3, help='–ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π AI-–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏')
    parser.add_argument('--limit', type=int, default=None, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--offset', type=int, default=0, help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–≤—ã–µ N —Ñ–∞–π–ª–æ–≤ –∏ –Ω–∞—á–∞—Ç—å —Å (N+1)-–≥–æ')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_file = Path(args.config)
    if not config_file.exists() or not config_file.is_file():
        print(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {config_file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return 1
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    success = process_batch(config_file, args.verbose, args.provider, args.skip_docker_check, args.max_iterations, args.limit, args.offset)
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
